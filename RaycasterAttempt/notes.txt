den -32
nom1 ((4 - 0) * (0 - 4)) - ((0 - 4) * (0 - 0));
nom2 ((4 - 0) * (0 - 4)) - ((4 - 0) * (0 - 0));

nom1 -16
nom2 -16


    if (event.key.search(/^[A-Z]$/gi == 0) || event.key == 'Shift') {
        const j = keyMap['Shift'];
        controller[j].pressed = isDown;
    }


    /*
function rayCastingReturnWall(startingPoint, angle, length) {
 
    for (let k = 0; k < length; k += 0.5) {
        const vectorDisplacement = calculateVectorDisplacement(angle, k)
        const currentPoint = { x: Math.floor(startingPoint.x + vectorDisplacement.x), y: Math.floor(startingPoint.y + vectorDisplacement.y) }
        for (let i = 0; i <= (mapData.length) - 1; i++) {
            for (let j = 0; j <= (mapData[i].length) - 1; j++) {
                const element = mapData[i][j];
                if (element.x == currentPoint.x && element.y == currentPoint.y) {
                    return { x: element.x, y: element.yw, material: element.material, rayLength: k }
                }
            }
 
        }
    }
    return undefined
}
*/
                if (consolelogprint < 20) { console.log(returnMapData[i + 1]); consolelogprint++ }
            if(consolelogprint<20){console.log(rayResult);consolelogprint++}


lineLength*Object.keys(element.material)[i]

if (element.material.search(/(vertical)/gi) == 0)

//settings

const fov = 60 //make it even, not odd
const fps = 40
const renderAccuracy = 1200 //ammount of blocks per frame
const turnSensitivity = 3 //degrees turning on click of a or d
const stepLength = 0.2 //how far you go every frame
const renderDistance = 200 //impacts how far away a wall has to be to not appear, much longer distances might slow down the game
const gameSpeed = 1000//lower the number to make it faster 1000 is default
const sprintRate = 3// sprint is this number * regular speed

//end of settings
.button {
  margin-left: 20px;
  margin-top: 10px;
  text-shadow: 1px 1px white;
  border-radius: 10%;
  border: black;
  color: black;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 26px;
  position: sticky;
}